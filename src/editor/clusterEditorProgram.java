/*
*  Armadillo Workflow Platform v1.0
*  A simple pipeline system for phylogenetic analysis
*
*  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package editor;


import editor.DatabaseSQLite3_cellRenderer;
import workflows.workflow_properties;
import configuration.Config;
import configuration.Util;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import editor.ConnectorInfoBox;
import editor.EditorInterface;
import editors.HelpEditor;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import program.*;
import static program.RunProgram.workbox;
import workflows.Workbox;
import workflows.armadillo_workflow;
import workflows.armadillo_workflow.Workflow;
import workflows.workflow_properties_dictionnary;

/**
 * Editor of the object properties in the Main Workflow
 * Note: Only called if object doesnt have a Custum Editor
 * @author JG
 * @since Feb 2016
 */
public class clusterEditorProgram extends javax.swing.JDialog implements EditorInterface {
    
    ////////////////////////////////////////////////////////////////////////////
    /// VARIABLES
    
    Config config=new Config();
    //ConnectorInfoBox connectorinfobox;
    workflow_properties_dictionnary dict=new workflow_properties_dictionnary();
    String selected="";             // Selected properties
    Frame frame;
    workflow_properties properties=new workflow_properties();
    armadillo_workflow parent_workflow;
    
    public static HashMap<JCheckBox,JSpinner> DictMenuCBS0 = new HashMap<JCheckBox,JSpinner>();
    public static HashMap<JCheckBox,JTextField> DictMenuCBT0 = new HashMap<JCheckBox,JTextField>();
    public static HashMap<JCheckBox,JComboBox> DictMenuCBC0 = new HashMap<JCheckBox,JComboBox>();
    public static HashMap<JRadioButton,JSpinner> DictMenuRBS0 = new HashMap<JRadioButton,JSpinner>();
    public static HashMap<JRadioButton,JTextField> DictMenuRBT0 = new HashMap<JRadioButton,JTextField>();
    public static ArrayList<HashMap> listDictsMenu0 = new ArrayList<HashMap>();

    
    /** Creates new form propertiesJDialog */
    public clusterEditorProgram(java.awt.Frame parent, boolean modal,workflow_properties properties) {
        super(parent, modal);
        this.frame=parent;
        this.properties=properties;
        display(properties);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        clusterEnabled = new javax.swing.JCheckBox();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        BasicBA_text = new javax.swing.JTextField();
        BasicNodes_spinner = new javax.swing.JSpinner();
        BasicPPN_spinner = new javax.swing.JSpinner();
        BasicJN_text = new javax.swing.JTextField();
        BasicBA_box = new javax.swing.JCheckBox();
        BasicNodes_box = new javax.swing.JCheckBox();
        BasicPPN_box = new javax.swing.JCheckBox();
        BasicJN_box = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        WalltimeHours_spinner = new javax.swing.JSpinner();
        WalltimeMinutes_spinner = new javax.swing.JSpinner();
        WalltimeSeconds_spinner = new javax.swing.JSpinner();
        WalltimeHours_box = new javax.swing.JCheckBox();
        WalltimeMinutes_box = new javax.swing.JCheckBox();
        WalltimeSeconds_box = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        ContactEmail_text = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        ContactJobBegins = new javax.swing.JCheckBox();
        ContactJobEnds = new javax.swing.JCheckBox();
        ContactJobAbords = new javax.swing.JCheckBox();
        ContactEmail_box = new javax.swing.JCheckBox();
        ClusterDeleteAllFiles = new javax.swing.JCheckBox();
        ClosejButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setTitle("Properties");

        jTabbedPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane1ComponentShown(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setMaximumSize(new java.awt.Dimension(368, 351));
        jPanel3.setMinimumSize(new java.awt.Dimension(368, 351));
        jPanel3.setName(""); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(368, 351));

        clusterEnabled.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        clusterEnabled.setText("Cluster is enabled");
        clusterEnabled.setEnabled(false);
        clusterEnabled.setName("clusterEnabled"); // NOI18N
        clusterEnabled.setVerifyInputWhenFocusTarget(false);

        jTabbedPane2.setVerifyInputWhenFocusTarget(false);

        BasicBA_text.setEnabled(false);
        BasicBA_text.setMaximumSize(new java.awt.Dimension(115, 27));
        BasicBA_text.setMinimumSize(new java.awt.Dimension(115, 27));
        BasicBA_text.setName("BasicBA_text"); // NOI18N
        BasicBA_text.setPreferredSize(new java.awt.Dimension(115, 27));
        BasicBA_text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                BasicBA_textFocusLost(evt);
            }
        });
        BasicBA_text.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BasicBA_textPropertyChange(evt);
            }
        });

        BasicNodes_spinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        BasicNodes_spinner.setEnabled(false);
        BasicNodes_spinner.setMaximumSize(new java.awt.Dimension(115, 28));
        BasicNodes_spinner.setMinimumSize(new java.awt.Dimension(115, 28));
        BasicNodes_spinner.setName("BasicNodes_spinner"); // NOI18N
        BasicNodes_spinner.setPreferredSize(new java.awt.Dimension(115, 28));
        BasicNodes_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BasicNodes_spinnerStateChanged(evt);
            }
        });

        BasicPPN_spinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        BasicPPN_spinner.setEnabled(false);
        BasicPPN_spinner.setMaximumSize(new java.awt.Dimension(115, 28));
        BasicPPN_spinner.setMinimumSize(new java.awt.Dimension(115, 28));
        BasicPPN_spinner.setName("BasicPPN_spinner"); // NOI18N
        BasicPPN_spinner.setPreferredSize(new java.awt.Dimension(115, 28));
        BasicPPN_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BasicPPN_spinnerStateChanged(evt);
            }
        });

        BasicJN_text.setEnabled(false);
        BasicJN_text.setMaximumSize(new java.awt.Dimension(115, 27));
        BasicJN_text.setMinimumSize(new java.awt.Dimension(115, 27));
        BasicJN_text.setName("BasicJN_text"); // NOI18N
        BasicJN_text.setPreferredSize(new java.awt.Dimension(115, 27));
        BasicJN_text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                BasicJN_textFocusLost(evt);
            }
        });
        BasicJN_text.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BasicJN_textPropertyChange(evt);
            }
        });

        BasicBA_box.setText("Billed account");
        BasicBA_box.setName("BasicBA_box"); // NOI18N
        BasicBA_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BasicBA_boxActionPerformed(evt);
            }
        });

        BasicNodes_box.setText("Nodes");
        BasicNodes_box.setName("BasicNodes_box"); // NOI18N
        BasicNodes_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BasicNodes_boxActionPerformed(evt);
            }
        });

        BasicPPN_box.setText("Processors per nodes");
        BasicPPN_box.setName("BasicPPN_box"); // NOI18N
        BasicPPN_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BasicPPN_boxActionPerformed(evt);
            }
        });

        BasicJN_box.setText("Job Name");
        BasicJN_box.setName("BasicJN_box"); // NOI18N
        BasicJN_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BasicJN_boxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BasicBA_box)
                    .addComponent(BasicNodes_box)
                    .addComponent(BasicPPN_box)
                    .addComponent(BasicJN_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BasicNodes_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BasicPPN_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BasicBA_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BasicJN_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BasicBA_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BasicBA_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BasicNodes_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BasicNodes_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BasicPPN_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BasicPPN_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BasicJN_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BasicJN_box))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Basic", jPanel2);

        WalltimeHours_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        WalltimeHours_spinner.setEnabled(false);
        WalltimeHours_spinner.setMaximumSize(new java.awt.Dimension(115, 28));
        WalltimeHours_spinner.setMinimumSize(new java.awt.Dimension(115, 28));
        WalltimeHours_spinner.setName("WalltimeHours_spinner"); // NOI18N
        WalltimeHours_spinner.setPreferredSize(new java.awt.Dimension(115, 28));
        WalltimeHours_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                WalltimeHours_spinnerStateChanged(evt);
            }
        });

        WalltimeMinutes_spinner.setModel(new javax.swing.SpinnerNumberModel(5, 0, null, 1));
        WalltimeMinutes_spinner.setEnabled(false);
        WalltimeMinutes_spinner.setMaximumSize(new java.awt.Dimension(115, 28));
        WalltimeMinutes_spinner.setMinimumSize(new java.awt.Dimension(115, 28));
        WalltimeMinutes_spinner.setName("WalltimeMinutes_spinner"); // NOI18N
        WalltimeMinutes_spinner.setPreferredSize(new java.awt.Dimension(115, 28));
        WalltimeMinutes_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                WalltimeMinutes_spinnerStateChanged(evt);
            }
        });

        WalltimeSeconds_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        WalltimeSeconds_spinner.setEnabled(false);
        WalltimeSeconds_spinner.setMaximumSize(new java.awt.Dimension(115, 28));
        WalltimeSeconds_spinner.setMinimumSize(new java.awt.Dimension(115, 28));
        WalltimeSeconds_spinner.setName("WalltimeSeconds_spinner"); // NOI18N
        WalltimeSeconds_spinner.setPreferredSize(new java.awt.Dimension(115, 28));
        WalltimeSeconds_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                WalltimeSeconds_spinnerStateChanged(evt);
            }
        });

        WalltimeHours_box.setText("hours");
        WalltimeHours_box.setName("WalltimeHours_box"); // NOI18N
        WalltimeHours_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalltimeHours_boxActionPerformed(evt);
            }
        });

        WalltimeMinutes_box.setText("min");
        WalltimeMinutes_box.setName("WalltimeMinutes_box"); // NOI18N
        WalltimeMinutes_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalltimeMinutes_boxActionPerformed(evt);
            }
        });

        WalltimeSeconds_box.setText("sec");
        WalltimeSeconds_box.setName("WalltimeSeconds_box"); // NOI18N
        WalltimeSeconds_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalltimeSeconds_boxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WalltimeHours_box)
                    .addComponent(WalltimeMinutes_box)
                    .addComponent(WalltimeSeconds_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(WalltimeHours_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WalltimeMinutes_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WalltimeSeconds_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WalltimeHours_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WalltimeHours_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WalltimeMinutes_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WalltimeMinutes_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WalltimeSeconds_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WalltimeSeconds_box))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Walltime", jPanel4);

        ContactEmail_text.setEnabled(false);
        ContactEmail_text.setMaximumSize(new java.awt.Dimension(115, 27));
        ContactEmail_text.setMinimumSize(new java.awt.Dimension(115, 27));
        ContactEmail_text.setName("ContactEmail_text"); // NOI18N
        ContactEmail_text.setPreferredSize(new java.awt.Dimension(115, 27));

        jLabel12.setText("reception when");

        ContactJobBegins.setText("b - job begins");
        ContactJobBegins.setName("ContactJobBegins"); // NOI18N
        ContactJobBegins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactJobBeginsActionPerformed(evt);
            }
        });

        ContactJobEnds.setText("e - job ends");
        ContactJobEnds.setName("ContactJobEnds"); // NOI18N
        ContactJobEnds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactJobEndsActionPerformed(evt);
            }
        });

        ContactJobAbords.setText("a - job aborts");
        ContactJobAbords.setName("ContactJobAbords"); // NOI18N
        ContactJobAbords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactJobAbordsActionPerformed(evt);
            }
        });

        ContactEmail_box.setText("email address");
        ContactEmail_box.setName("ContactEmail_box"); // NOI18N
        ContactEmail_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContactEmail_boxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(ContactEmail_box))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ContactJobAbords)
                    .addComponent(ContactJobBegins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ContactJobEnds)
                    .addComponent(ContactEmail_text, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 56, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ContactEmail_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ContactEmail_box))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContactJobBegins, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ContactJobEnds)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContactJobAbords)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Contact", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("CalculQuébec", jPanel1);

        ClusterDeleteAllFiles.setSelected(true);
        ClusterDeleteAllFiles.setText("Delete All files on cluster at the end");
        ClusterDeleteAllFiles.setName("ClusterDeleteAllFiles"); // NOI18N
        ClusterDeleteAllFiles.setVerifyInputWhenFocusTarget(false);
        ClusterDeleteAllFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClusterDeleteAllFilesActionPerformed(evt);
            }
        });

        ClosejButton.setText("<html><b>Close</b></html>");
        ClosejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ClusterDeleteAllFiles)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(clusterEnabled)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clusterEnabled))
                    .addComponent(ClosejButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClusterDeleteAllFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cluster Access Options", jPanel9);

        jButton3.setText("?");
        jButton3.setToolTipText("Help / Informations");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void ClosejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosejButtonActionPerformed
        //-- 1. Did we change the properties? If, yes ask for direction
        //properties.save();
        //-- 2. Close dialog
        this.setVisible(false);
}//GEN-LAST:event_ClosejButtonActionPerformed
    
    private void jTabbedPane1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane1ComponentShown
        
}//GEN-LAST:event_jTabbedPane1ComponentShown
                    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        HelpEditor help = new HelpEditor(this.frame, false, properties);
        help.setVisible(true);
}//GEN-LAST:event_jButton3ActionPerformed
                        
    private void ClusterDeleteAllFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClusterDeleteAllFilesActionPerformed
        // TODO add your handling code here:
        if (ClusterDeleteAllFiles.isSelected()==true){
            properties.put(ClusterDeleteAllFiles.getName(),true);
        } else {
            properties.put(ClusterDeleteAllFiles.getName(),false);
        }
    }//GEN-LAST:event_ClusterDeleteAllFilesActionPerformed

    private void WalltimeHours_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalltimeHours_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, WalltimeHours_box, WalltimeHours_spinner);
    }//GEN-LAST:event_WalltimeHours_boxActionPerformed

    private void WalltimeMinutes_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalltimeMinutes_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, WalltimeMinutes_box, WalltimeMinutes_spinner);
    }//GEN-LAST:event_WalltimeMinutes_boxActionPerformed

    private void ContactJobEndsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactJobEndsActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, ContactJobEnds, null);
    }//GEN-LAST:event_ContactJobEndsActionPerformed

    private void ContactJobBeginsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactJobBeginsActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, ContactJobBegins, null);
    }//GEN-LAST:event_ContactJobBeginsActionPerformed

    private void ContactJobAbordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactJobAbordsActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, ContactJobAbords, null);
    }//GEN-LAST:event_ContactJobAbordsActionPerformed

    private void ContactEmail_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContactEmail_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventText(properties, ContactEmail_box, ContactEmail_text);
    }//GEN-LAST:event_ContactEmail_boxActionPerformed

    private void WalltimeHours_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_WalltimeHours_spinnerStateChanged
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, WalltimeHours_box, WalltimeHours_spinner);
    }//GEN-LAST:event_WalltimeHours_spinnerStateChanged

    private void WalltimeMinutes_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_WalltimeMinutes_spinnerStateChanged
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, WalltimeMinutes_box, WalltimeMinutes_spinner);
    }//GEN-LAST:event_WalltimeMinutes_spinnerStateChanged

    private void WalltimeSeconds_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_WalltimeSeconds_spinnerStateChanged
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, WalltimeSeconds_box, WalltimeSeconds_spinner);
    }//GEN-LAST:event_WalltimeSeconds_spinnerStateChanged

    private void BasicBA_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BasicBA_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventText(properties, BasicBA_box, BasicBA_text);
    }//GEN-LAST:event_BasicBA_boxActionPerformed

    private void BasicNodes_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BasicNodes_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, BasicNodes_box, BasicNodes_spinner);
    }//GEN-LAST:event_BasicNodes_boxActionPerformed

    private void BasicPPN_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BasicPPN_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, BasicPPN_box, BasicPPN_spinner);
    }//GEN-LAST:event_BasicPPN_boxActionPerformed

    private void BasicJN_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BasicJN_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventText(properties, BasicJN_box, BasicJN_text);
    }//GEN-LAST:event_BasicJN_boxActionPerformed

    private void BasicJN_textFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BasicJN_textFocusLost
        // TODO add your handling code here:
        Util.boxEventText(properties, BasicJN_box, BasicJN_text);
    }//GEN-LAST:event_BasicJN_textFocusLost

    private void BasicJN_textPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BasicJN_textPropertyChange
        // TODO add your handling code here:
        Util.boxEventText(properties, BasicJN_box, BasicJN_text);
    }//GEN-LAST:event_BasicJN_textPropertyChange

    private void BasicPPN_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BasicPPN_spinnerStateChanged
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, BasicPPN_box, BasicPPN_spinner);
    }//GEN-LAST:event_BasicPPN_spinnerStateChanged

    private void BasicNodes_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BasicNodes_spinnerStateChanged
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, BasicNodes_box, BasicNodes_spinner);
    }//GEN-LAST:event_BasicNodes_spinnerStateChanged

    private void BasicBA_textPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BasicBA_textPropertyChange
        // TODO add your handling code here:
        Util.boxEventText(properties, BasicBA_box, BasicBA_text);
    }//GEN-LAST:event_BasicBA_textPropertyChange

    private void BasicBA_textFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BasicBA_textFocusLost
        // TODO add your handling code here:
        Util.boxEventText(properties, BasicBA_box, BasicBA_text);
    }//GEN-LAST:event_BasicBA_textFocusLost

    private void WalltimeSeconds_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalltimeSeconds_boxActionPerformed
        // TODO add your handling code here:
        Util.boxEventSpinner(properties, WalltimeSeconds_box, WalltimeSeconds_spinner);
    }//GEN-LAST:event_WalltimeSeconds_boxActionPerformed
    
    /*******************************************************************
     * Perpare List Dictionaries
     ******************************************************************/

    /**
     * Perpare List of Dictionaries by a general reset
     * @param properties
     */

    public void resetDictionaries(workflow_properties properties){
        Util.dictsReset(listDictsMenu0,DictMenuCBS0,DictMenuCBT0,DictMenuCBC0,DictMenuRBS0,DictMenuRBT0);
    }

    /*******************************************************************
     * Perpare Dictionaries
     * 
     *     public static HashMap<JCheckBox,JSpinner> DictMenuCBS0 = new HashMap<JCheckBox,JSpinner>();
    public static HashMap<JCheckBox,JTextField> DictMenuCBT0 = new HashMap<JCheckBox,JTextField>();
    public static HashMap<JCheckBox,JComboBox> DictMenuCBC0 = new HashMap<JCheckBox,JComboBox>();
    public static HashMap<JRadioButton,JSpinner> DictMenuRBS0 = new HashMap<JRadioButton,JSpinner>();
    public static HashMap<JRadioButton,JTextField> DictMenuRBT0 = new HashMap<JRadioButton,JTextField>();

     ******************************************************************/

    /**
     * Perpare Dictionaries by adding commands
     * @param properties
     */

    public void perpareDictionaries(workflow_properties properties){
        DictMenuCBT0.put(BasicBA_box,BasicBA_text);
        DictMenuCBT0.put(BasicJN_box,BasicJN_text);
        DictMenuCBT0.put(ContactEmail_box, ContactEmail_text);
        DictMenuCBT0.put(BasicBA_box, BasicBA_text);
        DictMenuCBS0.put(BasicPPN_box,BasicPPN_spinner);
        DictMenuCBS0.put(WalltimeSeconds_box, WalltimeSeconds_spinner);
        DictMenuCBS0.put(WalltimeMinutes_box, WalltimeMinutes_spinner);
        DictMenuCBS0.put(WalltimeHours_box, WalltimeHours_spinner);
        DictMenuCBS0.put(ContactJobEnds, null);
        DictMenuCBS0.put(ContactJobBegins, null);
        DictMenuCBS0.put(ContactJobAbords, null);
        DictMenuCBS0.put(BasicNodes_box, BasicNodes_spinner);
        DictMenuCBS0.put(BasicPPN_box, BasicPPN_spinner);
    }

    /*
     * Other clusters for the futur
     *     Briaree_nom@briaree.calculquebec.ca
     *     Colosse_nom@colosse.calculquebec.ca
     *     Cottos_nom@cottos.calculquebec.ca
     *     Guillimin_nom@guillimin.hpc.mcgill.ca
     *     Mp2_nom@<nom du groupe>-mp2.ccs.usherbrooke.ca
     *     Ms2_nom@<nom du groupe>-ms.ccs.usherbrooke.ca
     *     Psi_nom@psi.concordia.ca
     */
    
    
    /**
     * General Update
     */
    
    /**
     * Load Saved Values
     */
    public void loadSavedValues(workflow_properties properties) {
        if (properties.isSet(ClusterDeleteAllFiles.getName())){
            boolean b = Boolean.getBoolean(properties.get(ClusterDeleteAllFiles));
            ClusterDeleteAllFiles.setSelected(b);
        }
    }
    
    /**
     * This set the Properties
     * @param properties
     */
    public void setProperties(workflow_properties properties) {
        this.properties=properties;
        setTitle("Cluster Local Options");
        Util.updateSavedProperties(properties,listDictsMenu0,null);
    }
    
    ///////////////////////////////////////////////////////////////////////////
    /// DISPLAY MAIN FUNCTION
    
    public void display(workflow_properties properties) {
        initComponents();
        //setProperties(properties);
        // Set position
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
                (screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setVisible(true);
        
        // Prepare dictionaries
        this.resetDictionaries(properties);
        this.perpareDictionaries(properties);
        this.setProperties(properties);
        if (workbox.isWorkboxOnCLuster()) {
            clusterEnabled.setSelected(true);
        } else {
            clusterEnabled.setSelected(false);
        }

        this.loadSavedValues(properties);
        if (!properties.isSet(ClusterDeleteAllFiles.getName())){
            properties.put(ClusterDeleteAllFiles.getName(), true);
            ClusterDeleteAllFiles.setSelected(true);
        }
    }
    
    public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds());
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
            Config.log("Unable to save "+filename+" dialog image");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BasicBA_box;
    private javax.swing.JTextField BasicBA_text;
    private javax.swing.JCheckBox BasicJN_box;
    private javax.swing.JTextField BasicJN_text;
    private javax.swing.JCheckBox BasicNodes_box;
    private javax.swing.JSpinner BasicNodes_spinner;
    private javax.swing.JCheckBox BasicPPN_box;
    private javax.swing.JSpinner BasicPPN_spinner;
    private javax.swing.JButton ClosejButton;
    private javax.swing.JCheckBox ClusterDeleteAllFiles;
    private javax.swing.JCheckBox ContactEmail_box;
    private javax.swing.JTextField ContactEmail_text;
    private javax.swing.JCheckBox ContactJobAbords;
    private javax.swing.JCheckBox ContactJobBegins;
    private javax.swing.JCheckBox ContactJobEnds;
    private javax.swing.JCheckBox WalltimeHours_box;
    private javax.swing.JSpinner WalltimeHours_spinner;
    private javax.swing.JCheckBox WalltimeMinutes_box;
    private javax.swing.JSpinner WalltimeMinutes_spinner;
    private javax.swing.JCheckBox WalltimeSeconds_box;
    private javax.swing.JSpinner WalltimeSeconds_spinner;
    private javax.swing.JCheckBox clusterEnabled;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    // End of variables declaration//GEN-END:variables
}
