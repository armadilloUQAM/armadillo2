/*
*  Armadillo Workflow Platform v1.0
*  A simple pipeline system for phylogenetic analysis
*
*  Copyright (C) 2009-2011  Etienne Lord, Mickael Leclercq
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package editors;


import biologic.seqclasses.InformationJDialog;
import biologic.*;
import javax.swing.SwingWorker;
import workflows.workflow_properties;
import configuration.Config;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import editor.EditorInterface;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import workflows.armadillo_workflow;

/**
 * Editor of the object properties in the Main Workflow
 * Note: Only called if object doesnt have a Custum Editor
 * @author Etienne Lord
 * @since July 2009
 */
public class loadFiles2Editor extends javax.swing.JDialog implements EditorInterface {
    
    ////////////////////////////////////////////////////////////////////////////
    /// VARIABLES
    
    Config config=new Config();
    //ConnectorInfoBox connectorinfobox;
    String selected="";             // Selected properties
    Frame frame;
    workflow_properties properties;
    armadillo_workflow parent_workflow;
    SwingWorker<Integer, InfoSequence>  loadSwingWorker; //SwingWorker to import sequence
    SwingWorker<Integer, Object>  loadSwingWorker2;     //SwingWorker to import sequence
    String old_filename  = "";
    String directoryContent = "";
    ////////////////////////////////////////////////////////////////////////////
    /// CONSTANT
    
    public final String defaultNameString="Name";
    
    /** Creates new form propertiesJDialog */
    public loadFiles2Editor(java.awt.Frame parent, armadillo_workflow parent_workflow) {
        super(parent, false);
        this.parent_workflow=parent_workflow;
        //--Set variables and init
        frame=parent;
        //connectorinfobox=new ConnectorInfoBox(parent); //--Used to display Connector info
        //--Initialize component
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        LAF_SendType_ButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        Filename_jTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        LAF2_Repeat_FilesSearch_Button = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NamejTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        type_jComboBox1 = new javax.swing.JComboBox();
        OkjButton = new javax.swing.JButton();
        CanceljButton = new javax.swing.JButton();
        LAF_Repeat_Label = new javax.swing.JLabel();
        LAF_Repeat_button = new javax.swing.JRadioButton();
        LAF2_AFIOS_Button = new javax.swing.JRadioButton();
        LAF2_AFIOS_Label = new javax.swing.JLabel();
        LAF2_AFIOS_Files_Panel = new javax.swing.JPanel();
        LAF2_AFIOS_update_button = new javax.swing.JButton();
        LAF2_AFIOS_ANF_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        LAF2_AFIOS_Files_List = new javax.swing.JList();
        LAF_ChooseOption_Label = new javax.swing.JLabel();
        LAF2_AFIOS_Filename_Panel = new javax.swing.JPanel();
        LAF2_AFIOS_Filename_jTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        LAF2_AFIOS_FilesSearch_Button = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setTitle("Properties");
        setResizable(false);

        jTabbedPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane1ComponentShown(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel3.setText("Directory or file(s)");

        LAF2_Repeat_FilesSearch_Button.setText("...");
        LAF2_Repeat_FilesSearch_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LAF2_Repeat_FilesSearch_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(Filename_jTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF2_Repeat_FilesSearch_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Filename_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LAF2_Repeat_FilesSearch_Button)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Name");

        jButton4.setText("Rename");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NamejTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton4))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setText("Output type to generate");

        type_jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TextFile", "SOLIDFile", "FastaFile", "Results", "Text", "GenomeFile", "FastqFile" }));
        type_jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                type_jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(type_jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(type_jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5))
        );

        OkjButton.setText("<html><b>Ok</b></html>");
        OkjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkjButtonActionPerformed(evt);
            }
        });

        CanceljButton.setText("Cancel");
        CanceljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CanceljButtonActionPerformed(evt);
            }
        });

        LAF_Repeat_Label.setForeground(new java.awt.Color(255, 0, 0));
        LAF_Repeat_Label.setText("Note: This will be converted to a \"Repeat\" workflow");

        LAF_SendType_ButtonGroup.add(LAF_Repeat_button);
        LAF_Repeat_button.setText("Repeat Worflows");
        LAF_Repeat_button.setName("LAF_Repeat_button"); // NOI18N
        LAF_Repeat_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LAF_Repeat_buttonActionPerformed(evt);
            }
        });

        LAF_SendType_ButtonGroup.add(LAF2_AFIOS_Button);
        LAF2_AFIOS_Button.setText("All Files In One Shot (ONLY supported by : Bowtie2,Bowtie)");
        LAF2_AFIOS_Button.setName("LAF2_AFIOS_Button"); // NOI18N
        LAF2_AFIOS_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LAF2_AFIOS_ButtonActionPerformed(evt);
            }
        });

        LAF2_AFIOS_Label.setForeground(new java.awt.Color(255, 0, 0));
        LAF2_AFIOS_Label.setText("Note: This will send all files in one shot. Please choose Files or directory wisely.");
        LAF2_AFIOS_Label.setName("LAF2_AFIOS_Label"); // NOI18N

        LAF2_AFIOS_update_button.setText("Remove Selected Files");
        LAF2_AFIOS_update_button.setName("LAF2_AFIOS_update_button"); // NOI18N
        LAF2_AFIOS_update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LAF2_AFIOS_update_buttonActionPerformed(evt);
            }
        });

        LAF2_AFIOS_ANF_button.setText("Add New Files");
        LAF2_AFIOS_ANF_button.setName("LAF2_AFIOS_ANF_button"); // NOI18N
        LAF2_AFIOS_ANF_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LAF2_AFIOS_ANF_buttonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(LAF2_AFIOS_Files_List);

        javax.swing.GroupLayout LAF2_AFIOS_Files_PanelLayout = new javax.swing.GroupLayout(LAF2_AFIOS_Files_Panel);
        LAF2_AFIOS_Files_Panel.setLayout(LAF2_AFIOS_Files_PanelLayout);
        LAF2_AFIOS_Files_PanelLayout.setHorizontalGroup(
            LAF2_AFIOS_Files_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LAF2_AFIOS_Files_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LAF2_AFIOS_Files_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(LAF2_AFIOS_Files_PanelLayout.createSequentialGroup()
                        .addComponent(LAF2_AFIOS_update_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LAF2_AFIOS_ANF_button)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        LAF2_AFIOS_Files_PanelLayout.setVerticalGroup(
            LAF2_AFIOS_Files_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LAF2_AFIOS_Files_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LAF2_AFIOS_Files_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LAF2_AFIOS_update_button)
                    .addComponent(LAF2_AFIOS_ANF_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        LAF_ChooseOption_Label.setForeground(new java.awt.Color(255, 0, 0));
        LAF_ChooseOption_Label.setText("Select an option. Anytime, a doubt => cancel and reopen");

        LAF2_AFIOS_Filename_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setText("Directory or file(s)");

        LAF2_AFIOS_FilesSearch_Button.setText("...");
        LAF2_AFIOS_FilesSearch_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LAF2_AFIOS_FilesSearch_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LAF2_AFIOS_Filename_PanelLayout = new javax.swing.GroupLayout(LAF2_AFIOS_Filename_Panel);
        LAF2_AFIOS_Filename_Panel.setLayout(LAF2_AFIOS_Filename_PanelLayout);
        LAF2_AFIOS_Filename_PanelLayout.setHorizontalGroup(
            LAF2_AFIOS_Filename_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LAF2_AFIOS_Filename_PanelLayout.createSequentialGroup()
                .addComponent(LAF2_AFIOS_Filename_jTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF2_AFIOS_FilesSearch_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        LAF2_AFIOS_Filename_PanelLayout.setVerticalGroup(
            LAF2_AFIOS_Filename_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LAF2_AFIOS_Filename_PanelLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LAF2_AFIOS_Filename_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LAF2_AFIOS_Filename_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LAF2_AFIOS_FilesSearch_Button)))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(LAF_ChooseOption_Label))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(LAF_Repeat_Label)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LAF2_AFIOS_Files_Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(CanceljButton)
                                .addGap(18, 18, 18)
                                .addComponent(OkjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LAF_Repeat_button)
                                    .addComponent(LAF2_AFIOS_Label)
                                    .addComponent(LAF2_AFIOS_Button))
                                .addGap(0, 24, Short.MAX_VALUE))
                            .addComponent(LAF2_AFIOS_Filename_Panel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF_ChooseOption_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF_Repeat_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF_Repeat_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(LAF2_AFIOS_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF2_AFIOS_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF2_AFIOS_Filename_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LAF2_AFIOS_Files_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OkjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CanceljButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Load All Files", jPanel9);

        jButton3.setText("?");
        jButton3.setToolTipText("Help / Informations");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addGap(17, 17, 17))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane1ComponentShown
        
}//GEN-LAST:event_jTabbedPane1ComponentShown

    private void LAF2_Repeat_FilesSearch_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LAF2_Repeat_FilesSearch_ButtonActionPerformed
        filesSearchFunction();
    }//GEN-LAST:event_LAF2_Repeat_FilesSearch_ButtonActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        HelpEditor help = new HelpEditor(this.frame, false, properties);
        help.setVisible(true);
}//GEN-LAST:event_jButton3ActionPerformed

    private void OkjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkjButtonActionPerformed
        //properties.put("inputname", this.Filename_jTextField.getText());
        this.setVisible(false);
    }//GEN-LAST:event_OkjButtonActionPerformed

    private void CanceljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CanceljButtonActionPerformed
        if (properties.isSet(LAF2_AFIOS_Button.getName())) {
            cleanAFIOSDatas();
            properties.remove(LAF2_AFIOS_Button.getName());
            properties.remove("Description");
        }
        if (properties.isSet(LAF_Repeat_button.getName())) {
            cleanRepeatDatas();
            properties.remove(LAF_Repeat_button.getName());
            properties.remove("DescriptionAFIOS");
            
        }
        properties.remove("type");
        properties.remove("ForObjectID");
        this.setVisible(false);
    }//GEN-LAST:event_CanceljButtonActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        properties.put("Name", this.NamejTextField.getText());
        parent_workflow.updateCurrentWorkflow(properties);
}//GEN-LAST:event_jButton4ActionPerformed

    private void type_jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_type_jComboBox1ActionPerformed
        // 0. Sequences
        // 1. MultipleSequences
        // 2. Alignment
        if (properties.isSet("type")) properties.remove("type");
        properties.put("type", this.type_jComboBox1.getSelectedIndex());
}//GEN-LAST:event_type_jComboBox1ActionPerformed

    private void LAF_Repeat_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LAF_Repeat_buttonActionPerformed
        // TODO add your handling code here:
        LAF_ChooseOption_Label.setVisible(false);
        if (properties.isSet(LAF2_AFIOS_Button.getName())) {
            properties.remove(LAF2_AFIOS_Button.getName());
            cleanAFIOSDatas();
            this.Filename_jTextField.setText("");
        }
        properties.remove("type");
        properties.remove("DescriptionAFIOS");
        properties.remove("ForObjectID");
        properties.put(LAF_Repeat_button.getName(),LAF_Repeat_button.isSelected());
        optionLabelRepeatVisibility(true);
        directoryRepeatEnabled(true);
        directoryAFIOSEnabled(false);
    }//GEN-LAST:event_LAF_Repeat_buttonActionPerformed

    private void LAF2_AFIOS_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LAF2_AFIOS_ButtonActionPerformed
        // TODO add your handling code here:
        LAF_ChooseOption_Label.setVisible(false);
        if (properties.isSet(LAF_Repeat_button.getName())) {
            cleanRepeatDatas();
            properties.remove(LAF_Repeat_button.getName());
            this.Filename_jTextField.setText("");
        }
        properties.remove("type");
        properties.remove("Description");
        properties.remove("ForObjectID");
        properties.put(LAF2_AFIOS_Button.getName(),LAF2_AFIOS_Button.isSelected());
        optionLabelRepeatVisibility(false);
        directoryRepeatEnabled(false);
        directoryAFIOSEnabled(true);
    }//GEN-LAST:event_LAF2_AFIOS_ButtonActionPerformed

    private void LAF2_AFIOS_ANF_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LAF2_AFIOS_ANF_buttonActionPerformed
        // TODO add your handling code here:
        JFileChooser jf;
        if (this.LAF2_AFIOS_Filename_jTextField.getText().isEmpty()) {
            jf=new JFileChooser(config.getExplorerPath());
        } else {
            jf=new JFileChooser(this.LAF2_AFIOS_Filename_jTextField.getText());
        }
        jf.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jf.setAcceptAllFileFilterUsed(false);
        jf.setMultiSelectionEnabled(true);
        int result=jf.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            File[] files=jf.getSelectedFiles();
            String filesList = properties.get("inputAllNames");
            String tmpFilesList = allFilesNames(files);
            if (!tmpFilesList.equals("")) filesList=filesList+"<>"+tmpFilesList;
            cleanRepeatDatas();
            // Automaticaly update jComboBox type of file(s) if it's possible
            updateTypeOfFile(filesList);
            addFilesInTheList();
        }
    }//GEN-LAST:event_LAF2_AFIOS_ANF_buttonActionPerformed

    private void LAF2_AFIOS_update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LAF2_AFIOS_update_buttonActionPerformed
        // TODO add your handling code here:
        updateList();
    }//GEN-LAST:event_LAF2_AFIOS_update_buttonActionPerformed

    private void LAF2_AFIOS_FilesSearch_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LAF2_AFIOS_FilesSearch_ButtonActionPerformed
        // TODO add your handling code here:
        filesSearchFunction();
    }//GEN-LAST:event_LAF2_AFIOS_FilesSearch_ButtonActionPerformed
    
    ////////////////////////////////////////////////////////////////////////////
    /// FILES FUNCTIONS
    ////////////////////////////////////////////////////////////////////////////
    
    ///                          ///
    // Main files search function //
    ///                          ///
    
    private void filesSearchFunction () {
        JFileChooser jf;
        if (this.LAF2_AFIOS_Filename_jTextField.getText().isEmpty() ||
               this.Filename_jTextField.getText().isEmpty()
            ) {
            jf=new JFileChooser(config.getExplorerPath());
        } else if (properties.isSet(LAF_Repeat_button.getName())) {
            jf=new JFileChooser(this.Filename_jTextField.getText());
        } else if (properties.isSet(LAF2_AFIOS_Button.getName())) {
            jf=new JFileChooser(this.LAF2_AFIOS_Filename_jTextField.getText());
        } else {
            jf=new JFileChooser("");
        }
        
        jf.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jf.setAcceptAllFileFilterUsed(false);
        jf.setMultiSelectionEnabled(true);
        int result=jf.showOpenDialog(this);
        
        if (result==JFileChooser.APPROVE_OPTION) {
            if (properties.isSet(LAF_Repeat_button.getName())) {
                //--Remove previous files in object
                cleanRepeatDatas();
                properties.put("ForObjectID",properties.getID());
            }
            
            //--Save new filepath and files
            File[] files=jf.getSelectedFiles();
            String filesList = allFilesNames(files);
            //Remove extra data
            if (properties.isSet(LAF_Repeat_button.getName())) {
                cleanAFIOSDatas();
            } else if (properties.isSet(LAF2_AFIOS_Button.getName())) {
                properties.remove("ForObjectID");
                cleanRepeatDatas();
                addFilesInTheList();
            }
            
            // Automaticaly update jComboBox type of file(s) if it's possible
            updateTypeOfFile(filesList);
            
            // Set directory content
            directorySet(directoryContent);
        }
    }
    
    
    ///                   ///
    // FILES SUB FUNCTIONS //
    ///                   ///
    
        // Function to add file(s) in a list of files reprensented by a String
        private String addToFilesList (String list,String file) {
            String s = list;
            if (s.equals("")) s = file;
            else s = s+"<>"+file;
            return s;
        }

        // Function to found what kind of files are present in the files list
        private int whatFilesInFilesList (String list) {
            String[] listFiles = list.split("<>");
            int [] nbType = new int [this.type_jComboBox1.getItemCount()];
            for (int t : nbType) t = 0; 
            int y = 0;
            for (String listFile : listFiles) {
                y = typeOfFile(listFile);
                nbType[y]=nbType[y]+1;
            }
            return maxIntTable(nbType);
        }

            // Sub function of whatFilesInFilesList
            private int typeOfFile (String list) {
                int typeVal = 0;
                String s = list;
                String type = "";

                int pos1 = s.lastIndexOf(".");
                type = s.substring(pos1+1,s.length());

                if (!type.equals("")) typeVal=findTypeInt(type);

                return typeVal;
            }
                // Sub function of typeOfFile
                private int findTypeInt(String s){
                    int type = 0;
                    if (s.equals("fasta")||s.equals("fa")||s.equals("fna")
                            ||s.equals("ffn")||s.equals("faa")||s.equals("frn")
                        ) type = 2;
                    else if (s.equals("txt")) type = 3;
                    else if (s.equals("bt2")||s.equals("ebwt")) type = 5;
                    else if (s.equals("fastq")||s.equals("fq")) type = 6;
                    return type;
                }

            // Sub function of whatFilesInFilesList
            private int maxIntTable(int [] tab){
                int max = tab[0];
                int pos = 0;
                for (int i = 1; i < tab.length; i++) {
                    if (tab[i] > max) {
                        max = tab[i];
                        pos = i;
                    }
                }
                return pos;
            }

            // obtain all files names and path in properties and string with <>
            private String allFilesNames(File[] files) {
                String s = "";
                if (files.length>1) {
                    directoryContent = "Multiple files...";
                    //--Note we handle recursive directory
                    for (File f:files) {
                        if (f.isDirectory()) {
                            s = extractFilesFromDir(f);
                        } else {
                            properties.put("For_"+f.getAbsolutePath(), "inputname");
                            s = addToFilesList(s,f.getAbsolutePath());
                        }
                    }
                } else if (files.length==1&&!files[0].isDirectory()) {
                    directoryContent = files[0].getAbsolutePath();
                    properties.remove("ForObjectID");
                    properties.put("inputname", files[0].getAbsolutePath());
                    s = addToFilesList(s,files[0].getAbsolutePath());
                } else if (files.length==1&&files[0].isDirectory()) {
                    directoryContent = "Multiple files in "+files[0].getAbsolutePath();
                    s = extractFilesFromDir(files[0]);
                } else {
                    directoryContent = "";
                    properties.remove("ForObjectID");
                }
                return s;
            }
                // Sub function of allFilesNames
                // @parameter : File
                // @return : String List of file(s) separated with a <>
                private String extractFilesFromDir (File f) {
                    String s = "";
                    for (File f1:this.listDir(f)) {
                        properties.put("For_"+f1.getAbsolutePath(), "inputname");
                        s = addToFilesList(s,f1.getAbsolutePath());    
                    }
                    return s;
                }
                    // Sub fonction of extracFilesFromDir
                    // Function that return files from a directory
                    public Vector<File> listDir(File f) {
                        Vector<File> toReturn=new Vector<File>();
                        for (File f2:f.listFiles()) {
                            if (f2.isDirectory()) {
                                toReturn.addAll(listDir(f2));
                            } else {
                                toReturn.add(f2);
                            }
                        }
                        return toReturn;
                    }

            // Update the type of file(s)
            private void updateTypeOfFile (String s) {
                int typeOfFiles = 0;
                if (!s.equals("") && s.contains("<>")) {
                    s = sortList(s);
                    typeOfFiles = whatFilesInFilesList(s);
                    properties.put("inputAllNames",s);
                    addFilesInTheList();
                } else if (!s.equals("") && !s.contains("<>")) {
                    String type = s.substring(s.lastIndexOf(".")+1,s.length());
                    typeOfFiles = findTypeInt(type);
                    properties.put("inputAllNames",s);
                }
                this.type_jComboBox1.setSelectedIndex(typeOfFiles);
                properties.put("type", this.type_jComboBox1.getSelectedIndex());
            }
                //sub function of updateTypeOfFile
                private String sortList (String list) {
                    String sIn = list;
                    String sOut = "";
                    String[] tab = sIn.split("<>");
                    Arrays.sort(tab);
                    for (int i = 0; i < tab.length; i++) {
                        sOut = addToFilesList(sOut,tab[i]);
                    }
                    return sOut;
                }

            // Directory field and content Setting
            private void directorySet(String s){
                if (properties.isSet(LAF_Repeat_button.getName())) {
                    properties.put("Description", s);
                    this.Filename_jTextField.setText(s);
                } else if (properties.isSet(LAF2_AFIOS_Button.getName())) {
                    properties.put("DescriptionAFIOS", s);
                    this.LAF2_AFIOS_Filename_jTextField.setText(s);
                }
            }
    
    ///////////////////////////////////////////////////////////////////////////
    /// FUNCTIONS Visibility
    ///////////////////////////////////////////////////////////////////////////
        
    
    private void optionLabelRepeatVisibility (boolean enabled){
        boolean disabled = !enabled;
        this.LAF_Repeat_Label.setVisible(enabled);
        this.LAF2_AFIOS_Label.setVisible(disabled);
        this.LAF2_AFIOS_Files_Panel.setVisible(disabled);
        this.LAF2_AFIOS_Filename_Panel.setVisible(disabled);
    }
    
    private void directoryRepeatEnabled (boolean enabled){
        this.jPanel3.setVisible(enabled);
        this.Filename_jTextField.setEnabled(enabled);
        this.LAF2_Repeat_FilesSearch_Button.setEnabled(enabled);
    }

    private void directoryAFIOSEnabled (boolean enabled){
        this.LAF2_AFIOS_Filename_Panel.setVisible(enabled);
        this.LAF2_AFIOS_Filename_jTextField.setEnabled(enabled);
        this.LAF2_AFIOS_FilesSearch_Button.setEnabled(enabled);
    }
    ///////////////////////////////////////////////////////////////////////////
    /// FUNCTIONS Cleanning and updating
    private void cleanRepeatDatas(){
        Vector<String>keys=new Vector<String>();
        for (Object k:properties.keySet()) keys.add((String)k);
        for(String key:keys) {
            if (key.startsWith("For_")) properties.remove(key);
        }
        properties.remove("inputname");
    }
    
    private void cleanAFIOSDatas(){
        LAF2_AFIOS_Files_List.removeAll();
        properties.remove("inputAllNames");
    }


    private void addFilesInTheList (){
        String[] tab = (properties.get("inputAllNames")).split("<>");
        LAF2_AFIOS_Files_List.setListData(tab);
    }
    
    private void updateList () {
        String s = "";
        String t = "";
        int[] tabInt = this.LAF2_AFIOS_Files_List.getSelectedIndices();
        
        if (tabInt.length>0) {
            for (int i:tabInt)
                LAF2_AFIOS_Files_List.remove(i);
            int listSize = LAF2_AFIOS_Files_List.getModel().getSize();
            
            for (int i = 0 ; i < listSize; i++) {
                t = LAF2_AFIOS_Files_List.getModel().getElementAt(tabInt[i]).toString();
                s = addToFilesList(s,t);
            }
            properties.put("inputAllNames",s);
            updateTypeOfFile(s);
        }
    }
    
    
    
    ///////////////////////////////////////////////////////////////////////////
    /// DISPLAY MAIN FUNCTION
    
    public void display(workflow_properties properties) {
        this.properties=properties;
        initComponents();
        setIconImage(Config.image);
        setSettingForProperties();
        
        // Set position
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension d = getSize();
        setLocation((screenSize.width-d.width)/2,
                (screenSize.height-d.height)/2);
        this.setAlwaysOnTop(true);
        this.setVisible(true);
    }

    /**
     * This set the different setting corresponding to the current properties
     */
    public void setSettingForProperties() {
        setTitle(properties.getName());
        this.NamejTextField.setText(properties.getName());
        
        LAF_ChooseOption_Label.setVisible(false);
        if (!properties.isSet(LAF_Repeat_button.getName()) &&
                !properties.isSet(LAF2_AFIOS_Button.getName())) {
            directoryRepeatEnabled(false);
            directoryAFIOSEnabled(false);
            this.LAF2_AFIOS_Files_Panel.setVisible(false);
            LAF_ChooseOption_Label.setVisible(true);
        }
        if (properties.isSet(LAF_Repeat_button.getName())) {
            cleanAFIOSDatas();
            optionLabelRepeatVisibility(true);
            directoryRepeatEnabled(true);
            directoryAFIOSEnabled(false);
            
            this.LAF_Repeat_button.setSelected(true);
            if (properties.isSet("inputname")) {
                this.Filename_jTextField.setText(properties.get("inputname"));
            }
        }
        if (properties.isSet(LAF2_AFIOS_Button.getName())) {
            optionLabelRepeatVisibility(false);
            directoryAFIOSEnabled(true);
            directoryRepeatEnabled(false);
            
            this.LAF2_AFIOS_Button.setSelected(true);
            if (properties.isSet("DescriptionAFIOS")) {
                this.LAF2_AFIOS_Filename_jTextField.setText(properties.get("DescriptionAFIOS"));
            } else {
                this.LAF2_AFIOS_Filename_jTextField.setText("");
            }
            if (properties.isSet("inputAllNames")) addFilesInTheList();
        }
        
        if (properties.isSet("type")) {
            this.type_jComboBox1.setSelectedIndex(properties.getInt("type"));
        }
    }

    @Override
    public void saveImage(String filename) {
        BufferedImage bi;
        try {
            bi = new Robot().createScreenCapture(this.getBounds());
            ImageIO.write(bi, "png", new File(filename));
            this.setVisible(false);
        } catch (Exception ex) {
            Config.log("Unable to save "+filename+" dialog image");
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CanceljButton;
    private javax.swing.JTextField Filename_jTextField;
    private javax.swing.JButton LAF2_AFIOS_ANF_button;
    private javax.swing.JRadioButton LAF2_AFIOS_Button;
    private javax.swing.JPanel LAF2_AFIOS_Filename_Panel;
    private javax.swing.JTextField LAF2_AFIOS_Filename_jTextField;
    private javax.swing.JButton LAF2_AFIOS_FilesSearch_Button;
    private javax.swing.JList LAF2_AFIOS_Files_List;
    private javax.swing.JPanel LAF2_AFIOS_Files_Panel;
    private javax.swing.JLabel LAF2_AFIOS_Label;
    private javax.swing.JButton LAF2_AFIOS_update_button;
    private javax.swing.JButton LAF2_Repeat_FilesSearch_Button;
    private javax.swing.JLabel LAF_ChooseOption_Label;
    private javax.swing.JLabel LAF_Repeat_Label;
    private javax.swing.JRadioButton LAF_Repeat_button;
    private javax.swing.ButtonGroup LAF_SendType_ButtonGroup;
    private javax.swing.JTextField NamejTextField;
    private javax.swing.JButton OkjButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox type_jComboBox1;
    // End of variables declaration//GEN-END:variables
    
    
    
}
